class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def move(self):
        print("move")
    
    def draw(self):
        print("draw")

point = Point(0, 0)
print(point.x)

# Задача: Создать класс Robot, который будет иметь координаты x и y и методы движения left(), right(), up(), down()
# 
# Q&A: А зачем вообще нужны классы? - Мы можем написав код класса единожды, насоздавать много обхектов этого класса,
# которые будут иметь одинаковое поведение, но разное состояние. Например Роботы в игре. Из будет много, они будут
# иметь одинаковое поведение, зато будут иметь разное состояние (находиться в разных местах).
# Кажется, что мы могли бы обойтись и без класса. Завели бы две переменных: x, y.
# Если робот ходит вправо, к переменной “x” прибавляется единица. Если вверх, то к переменной “y” прибавляется 
# единица. Не нужны никакие объекты и классы. Все это так, но сложность возникает когда нужно создать двух роботов.
# Что получается? Нужно завести 4 переменные, по 2 на каждого робота. Первую пару мы назовем “x1” и “y1”, 
# вторую “x2” и “y2”. Уже неудобно, но можно и обойтись. Но что если роботов будет больше? 
# “Можно обойтись массивом”, - скажет читатель и будет прав. Можно создать массив переменных. 
# Это просто будет какая-то структура данных, и какие-то методы будут знать как с ней работать. 
# Но постойте, работать со структурой данных сложнее, чем просто с переменными!
# Намного проще написать `x = x + 1`, чем например `x[5] = x[5] + 1`. 
# Другими словами, объекты и классы облегчают создание программы. Давайте создадим описанный класс робота.

class Robot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def right(self):
        self.x += 1


    def left(self):
        self.x -= 1

    def up(self):
        self.y += 1

    def down(self):
        self.y -= 1
 
robot1 = Robot(0, 0)
robot1.up()
robot1.up()
robot1.up()
robot1.right()
print(f"x: {robot1.x} | y: {robot1.y}")